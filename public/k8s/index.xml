<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>K8s on kubedaily</title>
    <link>https://kubedaily.com/k8s/</link>
    <description>Recent content in K8s on kubedaily</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://kubedaily.com/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title> Basics of Pod </title>
      <link>https://kubedaily.com/k8s/basics-of-pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/basics-of-pod/</guid>
      <description>0. What is POD learn via Kubectl Explain kubectl explain pod KIND: Pod VERSION: v1 DESCRIPTION: Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts. FIELDS: apiVersion &amp;lt;string&amp;gt; APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources kind &amp;lt;string&amp;gt; Kind is a string value representing the REST resource this object represents.</description>
    </item>
    <item>
      <title> Pre-requisit for this lab </title>
      <link>https://kubedaily.com/k8s/pre-requisit-for-this-lab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/pre-requisit-for-this-lab/</guid>
      <description>Install Minikube https://minikube.sigs.k8s.io/docs/start/ // i&amp;#39;m using mac so my installation step will be diffeent from you folks curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 sudo install minikube-darwin-amd64 /usr/local/bin/minikube ceate cluster using minikube ‚ûú k8sworkshop git:(main) ‚úó minikube start üòÑ minikube v1.28.0 on Darwin 13.2.1 (arm64) ‚ú® Using the docker driver based on existing profile üëç Starting control plane node minikube in cluster minikube üöú Pulling base image ... üîÑ Restarting existing docker container for &amp;#34;minikube&amp;#34; .</description>
    </item>
    <item>
      <title>ConfigMap </title>
      <link>https://kubedaily.com/k8s/configmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/configmap/</guid>
      <description>craete index-html-configmap.yaml with following content apiVersion: v1 kind: ConfigMap metadata: name: index-html-configmap namespace: default data: index.html: | &amp;lt;html&amp;gt; &amp;lt;h1&amp;gt;Welcome&amp;lt;/h1&amp;gt; &amp;lt;/br&amp;gt; &amp;lt;h1&amp;gt;Hi! This is a configmap Index file &amp;lt;/h1&amp;gt; &amp;lt;/html&amp;gt; ‚ûú k8s101 git:(main) ‚úó kubectl apply -f index-html-configmap.yaml configmap/index-html-configmap created craete nginx.yaml with following content apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment namespace: default spec: selector: matchLabels: app: nginx replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:latest ports: - containerPort: 80 volumeMounts: - name: nginx-index-file mountPath: /usr/share/nginx/html/ volumes: - name: nginx-index-file configMap: name: index-html-configmap ‚ûú k8s101 git:(main) ‚úó kubectl apply -f ngnix.</description>
    </item>
    <item>
      <title>Create POD with Command and Arguments </title>
      <link>https://kubedaily.com/k8s/create-pod-with-command-and-arguments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/create-pod-with-command-and-arguments/</guid>
      <description>kubectl explain pods.spec.containers.command k8s101 git:(main) ‚úó kubectl explain pods.spec.containers.command KIND: Pod VERSION: v1 FIELD: command &amp;lt;[]string&amp;gt; DESCRIPTION: Entrypoint array. Not executed within a shell. The container image&amp;#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&amp;#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.</description>
    </item>
    <item>
      <title>Deployments and replication</title>
      <link>https://kubedaily.com/k8s/deployments-and-replication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/deployments-and-replication/</guid>
      <description>Kubectl explain Deployment k8sworkshop git:(main) ‚úó kubectl explain deployments KIND: Deployment VERSION: apps/v1 DESCRIPTION: Deployment enables declarative updates for Pods and ReplicaSets. FIELDS: apiVersion &amp;lt;string&amp;gt; APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources kind &amp;lt;string&amp;gt; Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to.</description>
    </item>
    <item>
      <title>Ingress Controller</title>
      <link>https://kubedaily.com/k8s/ingress-controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/ingress-controller/</guid>
      <description>enable ingress addon k8s101 git:(main) ‚úó minikube addons enable ingress üí° ingress is an addon maintained by Kubernetes. For any concerns contact minikube on GitHub. You can view the list of minikube maintainers at: https://github.com/kubernetes/minikube/blob/master/OWNERS üí° After the addon is enabled, please run &amp;#34;minikube tunnel&amp;#34; and your ingress resources would be available at &amp;#34;127.0.0.1&amp;#34; ‚ñ™ Using image k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1 ‚ñ™ Using image k8s.gcr.io/ingress-nginx/controller:v1.2.1 ‚ñ™ Using image k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1 üîé Verifying ingress addon... üåü The &amp;#39;ingress&amp;#39; addon is enabled ‚ûú k8s101 git:(main) ‚úó verify ngnix controller running ‚ûú k8s101 git:(main) ‚úó kubectl get pods -n ingress-nginx NAME READY STATUS RESTARTS AGE ingress-nginx-admission-create-fxzbs 0/1 Completed 0 4m7s ingress-nginx-admission-patch-jw98n 0/1 Completed 1 4m7s ingress-nginx-controller-5959f988fd-tv8x8 1/1 Running 0 4m7s verify all pods running ‚ûú k8s101 git:(main) ‚úó kubectl get pods -n kube-system NAME READY STATUS RESTARTS AGE coredns-565d847f94-bl9qz 1/1 Running 0 12h etcd-minikube 1/1 Running 0 12h kube-apiserver-minikube 1/1 Running 0 12h kube-controller-manager-minikube 1/1 Running 0 12h kube-proxy-qj7s7 1/1 Running 0 12h kube-scheduler-minikube 1/1 Running 0 12h storage-provisioner 1/1 Running 2 (12h ago) 12h Deploy Hello World App ‚ûú k8s101 git:(main) ‚úó kubectl create deployment web --image=gcr.</description>
    </item>
    <item>
      <title>Kubernetes</title>
      <link>https://kubedaily.com/k8s/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/overview/</guid>
      <description>Table of Content Title Link 1.Pre-requisit for this lab lab 2.Basics of Pod lab 3.Create POD with Command and Arguments lab 4.Multi-Container Pods lab 5.Deployments &amp;amp; replication lab 6.Labels &amp;amp; Selectors lab 7.Kubernetes Service lab 8.Service Type: NodePort,ClusterIP,LoadBalancer lab 9.Ingress Controller lab 10.ConfigMap lab What next &amp;raquo;
[kubernetes Security] [helm workshop] [Service Mesh] </description>
    </item>
    <item>
      <title>Kubernetes Service  </title>
      <link>https://kubedaily.com/k8s/kubernetes-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/kubernetes-service/</guid>
      <description>kubectl explain svc ‚ûú k8s101 git:(main) ‚úó kubectl explain svc KIND: Service VERSION: v1 DESCRIPTION: Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy. FIELDS: apiVersion &amp;lt;string&amp;gt; APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.</description>
    </item>
    <item>
      <title>Labels and Selectors </title>
      <link>https://kubedaily.com/k8s/labels-and-selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/labels-and-selectors/</guid>
      <description>Labels - Maps (aka Dictionaries) ‚ûú k8s101 git:(main) ‚úó kubectl explain deployment.metadata.labels KIND: Deployment VERSION: apps/v1 FIELD: labels &amp;lt;map[string]string&amp;gt; DESCRIPTION: Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels Labels are attached to Kubernetes objects and are simple key: value pairs or maps(dictionary). Labels are used to store identifying information about a thing that you might need to query against.</description>
    </item>
    <item>
      <title>Multi-Container Pods</title>
      <link>https://kubedaily.com/k8s/multi-container-pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/multi-container-pods/</guid>
      <description>Why does Kubernetes allow more than one container in a Pod Containers in a Pod runs on a &amp;ldquo;logical host&amp;rdquo;: they use the same network namespace (same IP address and port space), they can use shared volumes using several containers for an application is simpler to use, more transparent, and allows decoupling software dependencies Use Cases for Multi-Container Pods The primary purpose of a multi-container Pod is to support co-located, co-managed helper processes for a main program</description>
    </item>
    <item>
      <title>RBAC </title>
      <link>https://kubedaily.com/k8s/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/rbac/</guid>
      <description>Role Based Access Control (RBAC) Role-Based Access Control (RBAC) in Kubernetes is a method of regulating access to computer or network resources based on the roles of individual users within an enterprise. In the context of Kubernetes, RBAC allows you to control who has access to the Kubernetes API and what they can do with those resources
- Rules: A rule is a set of operations (verbs) that can be carried out on a group of resources which belong to different API Groups.</description>
    </item>
    <item>
      <title>Service Type - NodePort,ClusterIP,LoadBalancer </title>
      <link>https://kubedaily.com/k8s/service-type-nodeportclusteriploadbalancer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubedaily.com/k8s/service-type-nodeportclusteriploadbalancer/</guid>
      <description>Service Type1: NodePort NodePort service helps expose the Service on each Node‚Äôs IP at a static port (the NodePort). NodePort The port is available to all the workers in the cluster. A ClusterIP Service, to which the NodePort Service routes are automatically created. One would be able to contact the NodePort Service, from outside the cluster, by requesting :. The port on the POD is called the targetPort and the one connecting the NodePort service to the POD is called port.</description>
    </item>
  </channel>
</rss>
